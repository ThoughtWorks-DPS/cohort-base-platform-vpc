---
version: 2.1

orbs:
  terraform: twdps/terraform@0.5.0
  op: twdps/onepassword@1.0.0
  # used for github-release-notes feature
  executor-tools: twdps/executor-tools@0.8.0

# ==== global pipeline parameters

parameters:
  context:
    description: circleci context for all jobs
    type: string
    default: twdps-core-labs-team
  terraform-version:
    description: terraform version for all jobs
    type: string
    default: "1.2.2"
  executor-image:
    description: use this image for local job definitions
    type: string
    default: twdps/circleci-infra-aws:alpine-1.7.0

# ==== triggers

# git push: deploy sandbox
on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

# git tag: release 
on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment: 
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        description: cluster environment
        type: string
      source-env:
        description: env to source
        type: string
    steps:
      - op/env:
          env-file: << parameters.source-env >>
      - run:
          name: set ~/.terraformrc
          command: op inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.cluster >> environment variables
          command: op inject -i environments/<< parameters.cluster >>.auto.tfvars.json.tpl -o << parameters.cluster >>.auto.tfvars.json

jobs:

  validate-vpc:
    docker:
      - image: << pipeline.parameters.executor-image >>
    parameters:
      cluster:
        description: cluster vpc configuration to validate
        type: string
      source-env:
        description: env to source
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
          source-env: << parameters.source-env >>
      - run:
          name: test << parameters.cluster >> configuration
          environment:
            TEST_ENV: << parameters.cluster >>
          command: bash scripts/vpc.test.sh << parameters.cluster >>

workflows:
  version: 2

  deploy-sandbox-vpc:
    jobs:
      - terraform/plan:
          name: sandbox-change-plan
          context: << pipeline.parameters.context >>
          shell: op run --env-file=op.nonprod.env -- /bin/bash -eo pipefail
          workspace: sandbox
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: sandbox
                source-env: op.nonprod.env
          filters: *on-push-main

      - approve-sandbox-changes:
          type: approval
          requires:
            - sandbox-change-plan
          filters: *on-push-main

      - terraform/apply:
          name: sandbox-change-apply
          context: << pipeline.parameters.context >>
          shell: op run --env-file=op.nonprod.env -- /bin/bash -eo pipefail
          workspace: sandbox
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: sandbox
                source-env: op.nonprod.env
          requires:
            - approve-sandbox-changes
          filters: *on-push-main

      - validate-vpc:
          name: test-sandbox-vpc-configuration
          context: << pipeline.parameters.context >>
          cluster: sandbox
          source-env: op.nonprod.env
          requires:
            - sandbox-change-apply
          filters: *on-push-main

  deploy-prod-vpc:
    jobs:
      - terraform/destroy:
          name: preview-destroy
          context: << pipeline.parameters.context >>
          shell: op run --env-file=op.nonprod.env -- /bin/bash -eo pipefail
          workspace: preview
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: preview
                source-env: op.nonprod.env
          filters: *on-push-main

      # - approve-preview-changes:
      #     type: approval
      #     requires:
      #       - preview-change-plan
      #     filters: *on-tag-main

      # - terraform/apply:
      #     name: preview-change-apply
      #     context: << pipeline.parameters.context >>
      #     shell: op run --env-file=op.nonprod.env -- /bin/bash -eo pipefail
      #     workspace: preview
      #     terraform-version: << pipeline.parameters.terraform-version >>
      #     before-terraform:
      #       - set-environment:
      #           cluster: preview
      #           source-env: op.nonprod.env
      #     requires:
      #       - approve-preview-changes
      #     filters: *on-tag-main

      # - validate-vpc:
      #     name: test-preview-vpc-configuration
      #     context: << pipeline.parameters.context >>
      #     cluster: preview
      #     source-env: op.nonprod.env
      #     requires:
      #       - preview-change-apply
      #     filters: *on-tag-main

      - terraform/plan:
          name: prod-change-plan
          context: << pipeline.parameters.context >>
          shell: op run --env-file=op.prod.env -- /bin/bash -eo pipefail
          workspace: prod
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: prod
                source-env: op.prod.env
          filters: *on-tag-main

      - approve-prod-changes:
          type: approval
          requires:
            - prod-change-plan
          filters: *on-tag-main

      - terraform/apply:
          name: prod-change-apply
          context: << pipeline.parameters.context >>
          shell: op run --env-file=op.prod.env -- /bin/bash -eo pipefail
          workspace: prod
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: prod
                source-env: op.prod.env
          requires:
            - approve-prod-changes
          filters: *on-tag-main

      - validate-vpc:
          name: test-prod-vpc-configuration
          context: << pipeline.parameters.context >>
          source-env: op.prod.env
          cluster: prod
          requires:
            - prod-change-apply
          filters: *on-tag-main

  # generate-release-notes:
  #   jobs:
  #     - executor-tools/release:
  #         name: release-lab-platform-vpc
  #         context: << pipeline.parameters.context >>
  #         shell: op run --env-file=op.prod.env -- /bin/bash -eo pipefail
  #         filters: *on-tag-main

  # nightly vpc configuration validation
  nightly-vpc-configuration-validation:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - validate-vpc:
          name: nightly-sandbox-vpc-validation
          context: << pipeline.parameters.context >>
          source-env: op.nonprod.env
          cluster: sandbox 
      - validate-vpc:
          name: nightly-preview-vpc-validation
          context: << pipeline.parameters.context >>
          source-env: op.nonprod.env
          cluster: preview
      - validate-vpc:
          name: nightly-prod-vpc-validation
          context: << pipeline.parameters.context >>
          source-env: op.prod.env
          cluster: prod
